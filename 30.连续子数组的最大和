############题目描述###############

HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)


############解题思路################
首先判断假如整个数组全为负数，则直接返回最大的负数。对于存在正数的数组，则使用两个变量。一个变量（local_sum）用来从某一元素开始的累积和，当该累积和为负数时，那么重新在当前元素的狭义元素开始积累。另一个变量用来保存出现过的最大的local_sum。

###############代码##################

class Solution:
    def FindGreatestSumOfSubArray(self, array):
        # write code here
        if len(array) == 0:
            return 0
        if max(array) < 0:
            return max(array)
        local_sum, globe_sum = 0,0
        for i in array:
            local_sum = max(0, local_sum + i)
            globe_sum = max(local_sum, globe_sum)
        return globe_sum
