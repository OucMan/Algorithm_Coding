#################题目描述##################

给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。

##################解题思路#####################


思路1：利用python max函数进行暴力求解，时间复杂度为O(kn),k为窗口大小，n为流表长度

思路2：利用一个队列来保存可能为最大值的元素下表，具体判断为：当一个新进入的元素大于队尾下标对应的元素，说明队尾下标代表的元素不可能成为最大值，对队列中的元素都进行上述判断，因此队首下标对应的元素是窗口内的最大元素。此外，每进入一个数据，还要根据队列中的下标和当前元素的下标来将队列中的无效数据删除（即下标对应的数据与当前元素不在一个窗口内）。
因此时间复杂度最差为O（kn），最好为O（n）

########################################
class Solution:
    def maxInWindows(self, num, size):
        # write code here
        if not num or len(num) <= 0 or size > len(num) or size <=0:
            return []
        res = []
        maxWin = []
        for i in range(len(num)):
            if len(maxWin) > 0 and i - maxWin[0] >= size:
                maxWin.pop(0)
            while len(maxWin) > 0 and num[maxWin[-1]] < num[i]:
                maxWin.pop()
            maxWin.append(i)
            if i >= size - 1:
                res.append(num[maxWin[0]])
        return maxWin
