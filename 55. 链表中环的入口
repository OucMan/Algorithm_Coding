################题目描述################

给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。

##################解题思路######################

思路1：使用一个列表存储已经遍历到的节点，输出第一个在List中存在的节点，即为头结点

思路2：使用两个指针，一快一慢，如果存在环，则两个指针必定在环内相遇，然后从相遇的节点开始计数，依次遍历，计算下一次出现该节点时经过的长度，即为环的长度。然后两个指针，开始时都指向头节点，然后一个之前提前走环的长度步，然后两个指针一起走，相遇时的节点即为头结点

#################代码######################

思路1

# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def EntryNodeOfLoop(self, pHead):
        # write code here
        if not pHead:
            return None
        temp = []
        while pHead:
            if pHead not in temp:
                temp.append(pHead)
                pHead = pHead.next
            else:
                return pHead
        return None
        
思路2

# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def EntryNodeOfLoop(self, pHead):
        # write code here
        if not pHead:
            return None
        temp = []
        slow = pHead
        fast = slow.next
        while fast:
            if fast == slow:
                break
            slow = slow.next
            fast = fast.next
            if fast:
                fast = fast.next
        if fast == None:
            return None
        length = 1
        temp = fast
        while fast.next != temp:
            length = length + 1
            fast = fast.next
        fast = slow = pHead
        count = 0
        while count < length:
            fast = fast.next
            count = count + 1
        while fast != slow:
            fast = fast.next
            slow = slow.next
        return fast
