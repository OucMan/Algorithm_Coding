############题目描述###########

定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。
注意：保证测试中不会当栈为空的时候，对栈调用pop()或者min()或者top()方法。

##############解题思路###################

定义两个List一个是作为普通栈来存储数据，叫做普通栈，另一个用来存储每一个时刻的最小值，叫做最小值栈，即当压入一个数据时，它首先要和栈顶的元素比，如果小于栈顶元素，则新的最小值出现，它被压入栈顶，如果新的数据大于栈顶数据，则当前最小值还是栈顶数据，因此重新压入栈顶元素。

出栈时，同时删除两个List的栈顶元素（即最后一个数据）

top方法：直接返回普通栈的栈顶元素

min方法：直接返回最小值栈的栈顶元素

##############代码#################

class Solution:

    def __init__(self):
        self.stack = []
        self.min_stack = []
        
    def push(self, node):
        # write code here
        self.stack.append(node)
        if not self.min_stack or self.min_stack[-1] > node:
            self.min_stack.append(node)
        else:
            self.min_stack.append(self.min_stack[-1])
            
    def pop(self):
        # write code here
        self.stack.pop()
        self.min_stack.pop()
        
    def top(self):
        # write code here
        return self.stack[-1]
        
    def min(self):
        # write code here
        return self.min_stack[-1]
