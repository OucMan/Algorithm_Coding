##########题目描述##############

输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）


###########解题思路##############

首先为每一个节点复制新节点，并连接在各自的后面；

然后更新random指针

然后拆分链表

############代码###################

"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':

        if not head:return None
        # 在每个结点后边，copy一个新的结点
        cur = head
        while cur:
            tmp = cur.next
            cur.next = Node(cur.val,None,None)
            cur.next.next = tmp
            cur = tmp
        # copy random指针
        cur = head
        while cur:
            if cur.random:
                cur.next.random = cur.random.next
            cur = cur.next.next
        # 拆分新旧链表
        cur = head
        copy_head = head.next
        copy_cur = copy_head
        while copy_cur.next:
            cur.next = cur.next.next
            cur = cur.next
            copy_cur.next = copy_cur.next.next
            copy_cur = copy_cur.next
        # 尾端置空
        cur.next = None
        copy_cur.next = None
        return copy_head
