#########题目描述##########

输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。


#########解题思路##########

本题使用递归的方式来解决。首先前序遍历的第一个数肯定为根节点，然后在中序遍历中查找该根节点的位置，从头到根节点的位置之间的数据为左子树，从根节点的下一个节点到最后为根节点的右子树。进而分别得到左子树的前序遍历，中序遍历以及右子树的前序遍历和中序遍历，对他们调用相同的函数即得到根节点的左子节点和右子节点。

比如前序是{1,2,4,7,3,5,6,8}，中序是{4,7,2,1,5,3,8,6}。可以根据前序得到根节点时1，然后在中序中查找1的位置，继而发现{4,7,2}存在于根节点的左子树（左子树的中序遍历），{5,3,8,6}存在于根节点的右子树（右子树的中序遍历）。再回到前序得到，左子树的前序遍历为{2,4,7}，右子树的前序遍历为{3,5,6,8}。然后就分别得到了左子树的前序和中序以及右子树的前序和中序，递归调用函数，得到左子树中的根节点和右子树中的根节点，它们分别是根节点的左子节点和右子节点。

###########代码############

# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    # 返回构造的TreeNode根节点
    def reConstructBinaryTree(self, pre, tin):
        # write code here
        if len(pre) == 0 or len(tin) == 0 or len(pre) != len(tin):
            return None
        root = TreeNode(pre[0])
        i = tin.index(pre[0])
        root.left = self.reConstructBinaryTree(pre[1:i+1], tin[:i])
        root.right = self.reConstructBinaryTree(pre[i+1:], tin[i+1:])
        return root
        
        
        
        
        
        
