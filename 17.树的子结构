###########题目描述#########

输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）


###########解题思路############
递归方式解题：假如两个树的根节点相同，则树A和树B是否存在子树关系，否则，判断树B是不是树A的左子树的子树，以及树B是不是树A的右子树的子树。这是一处递归的使用。对于判断子树关系，又是一处递归处理，即先分析两个树根节点是否为空的情况，然后根节点不相等的情况，然后假如根节点相等的情况，继续判断左子树和右子树的情况（此处递归）。

#############代码###############

# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    def HasSubtree(self, pRoot1, pRoot2):
        # write code here
        if pRoot1 == None or pRoot2 == None:
            return False
        result = False
        if pRoot1.val == pRoot2.val:
            result = self.isSubTree(pRoot1, pRoot2)
        if result == False:
            result = self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2)
        return result
    
    def isSubTree(self, proot1, proot2):
        if proot2 == None:
            return True
        if proot1 == None:
            return False
        if proot1.val == proot2.val:
            return self.isSubTree(proot1.left, proot2.left) and self.isSubTree(proot1.right, proot2.right)
        else:
            return False
