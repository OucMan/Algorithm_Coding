##########题目描述###########

把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

###########解题思路################
原来是非递减排序的数组，将前面几个元素旋转到后面，找到这个旋转数组中的最小值。通过前后元素对比的方法可以得到结果，时间复杂度是O(N)，所以可以采用二分查找的思路，通过比较中间元素与最右边元素的大小来判断最小值位于哪个部分。具体的，假如将前面少于一半的元素旋转到后面，则中间元素会大于最右边的元素，最小值在右部分；当将前面多于或一半的元素旋转到后面，则中间元素会小于最右边元素，最小值在左部分。示意图可以去看目录中的示意图。



############代码#################

class Solution:
    def minNumberInRotateArray(self, rotateArray):
        # write code here
        if not rotateArray:
            return 0
        r = len(rotateArray) - 1
        l = 0
        while l < r:
            mid = (l + r) / 2
            if rotateArray[mid] > rotateArray[r]:
                l = mid + 1
            else:
                r = mid
        return rotateArray[l]
        

