#################题目描述#####################

地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？

###################解题思路###################

递归方式，当在一个方格可以时，继续向4个方向的方格移动

####################代码#####################

class Solution:
    def movingCount(self, threshold, rows, cols):
        # write code here
        if threshold < 1 or rows < 1 or cols < 1:
            return 0
        visited = [[True for i in range(cols)] for j in range(rows)]
        return self.moving(rows, cols, 0, 0, visited, threshold)
    
    def moving(self, rows, cols, row, col, visited, thres):
        count = 0
        if 0<=row and row<rows and 0<=col and col<cols and visited[row][col]:
            if (self.getSum(row)+self.getSum(col)) <= thres:
                visited[row][col] = False
                count = 1 + self.moving(rows, cols, row-1, col, visited, thres) \
                          + self.moving(rows, cols, row+1, col, visited, thres) \
                          + self.moving(rows, cols, row, col-1, visited, thres)\
                          + self.moving(rows, cols, row, col+1, visited, thres)
        return count
    
    def getSum(self, num):
        res = 0
        while num != 0:
            res = res + num%10
            num = num/10
        return res
        
